I"°c<p>With the completion of the ‚ÄúRename‚Äù button, it was time to move onto the next item on my list: the ability to ‚Äúcheck off‚Äù or temporarily disable recipe ingredients. I wanted to add this feature in case someone already had ingredients in their home, but didn‚Äôt necessarily want to delete the item from their list. In cases like this, it would be a good idea to be able to toggle an item.</p>

<p>In order to ensure persistence between refreshes, I decided that the best option would be to add a boolean value to my <code class="language-plaintext highlighter-rouge">CleanedLine</code> database model, that would then determine if the line was disabled or not.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">checked</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Boolean</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>  <span class="c1"># whether or not the item is checked off the list</span></code></pre></figure>

<p>This value defaults to false and is initialized with each new  <code class="language-plaintext highlighter-rouge">CleanedLine</code> item. From there, I decided that the next thing I would do would be to add the actual checkbox that the user would use to toggle the list item.</p>

<p>This, unfortunately, required a whole lot of rather unfun CSS learning. I‚Äôm still fairly new and shaky at the frontend part of this whole ‚ÄúApp Development‚Äù thing, and it took me longer than I care to admit to figure out the right combination of <code class="language-plaintext highlighter-rouge">div</code>s, <code class="language-plaintext highlighter-rouge">label</code>s, and <code class="language-plaintext highlighter-rouge">input</code>s that got a working, decent-looking custom checkbox to the left of each list item.</p>

<p>There were lots of errors and problems, but I want to highlight one in particular that stymied me for a while. I‚Äôd finally gotten to the point where I had a box to the left of the items, but there was this unexplained gap between each line that was not represented by any element in the DOM:</p>

<p><img src="/assets/img/posts/check-and-delete/unexplained-space.png" alt="alt text" /></p>

<p>I really scratched my head over this one, but it turns out that it was due to the fact that I was moving the list objects to the right and up using a <code class="language-plaintext highlighter-rouge">position: relative</code> CSS command, and that when that‚Äôs done, the space where the component <em>would</em> have gone remains empty. Hence the negative lines. The problem was solved by setting the margins of the objects to a negative amount, except for the first child (otherwise, the ‚Äúcooking oil‚Äù line you see above would have overlapped with the list name). I use this issue as an example of the kind of problem I faced: one with an ultimately simple, if counterintuitive, solution, but which got me stuck because I‚Äôm still learning how to do all this. While I‚Äôm definitely getting better, I have to say that frontend CSS work is easily my least favorite part of this whole process. Which is a shame, because I want this thing to look nice.</p>

<p>But anyway, I finally got a look that‚Äôs acceptable for now, although I do plan to come back at some point for more beautification.</p>

<p><img src="/assets/img/posts/check-and-delete/checkbox-fornow.png" alt="alt text" /></p>

<p>Here‚Äôs the html that I came up with:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"list-group list-group-root "</span> <span class="na">id=</span><span class="s">"compiled-list"</span><span class="nt">&gt;</span>
    {% for line in list_lines %}
      <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"recipe-label"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"checkbox-{{line.hex_id}}"</span> <span class="na">type=</span><span class="s">"checkbox"</span><span class="err">{{</span><span class="na">line.checked</span><span class="err">}}</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"recipe-checkbox"</span><span class="nt">&gt;&lt;/span&gt;</span>
      <span class="nt">&lt;/label&gt;</span>
      <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"line-{{line.hex_id}}"</span> <span class="na">class=</span><span class="s">"recipe-line"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"#{{line.ingredient_id}}"</span> <span class="na">class=</span><span class="s">"list-group-item"</span> <span class="na">data-toggle=</span><span class="s">"collapse"</span> <span class="na">aria-expanded=</span><span class="s">"false"</span> <span class="na">role=</span><span class="s">"button"</span><span class="nt">&gt;</span>
          {% for dot in line.color_dots %}
              <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"dot top-level hidden"</span> <span class="na">style=</span><span class="s">"background-color:{{dot}}"</span><span class="nt">&gt;&lt;/span&gt;</span>
                    {% endfor %}
                    {{ line.ingredient }}
          <span class="nt">&lt;/a&gt;</span>
          ...
  <span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>You‚Äôll notice several new features here. The first is the addition of some new classes, which I used to create the CSS here:</p>

<figure class="highlight"><pre><code class="language-css" data-lang="css"><span class="nc">.recipe-line</span> <span class="p">{</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
  <span class="nl">top</span><span class="p">:</span> <span class="m">-30px</span><span class="p">;</span>
  <span class="nl">left</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
  <span class="nl">vertical-align</span><span class="p">:</span> <span class="nb">top</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-checkbox</span><span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">aliceblue</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">3px</span> <span class="nb">solid</span> <span class="m">#ddd</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">40px</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-label</span> <span class="nt">input</span> <span class="p">{</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
  <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-label</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>
  <span class="nl">margin</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-label</span><span class="nd">:not</span><span class="o">(</span><span class="nd">:first-child</span><span class="o">)</span><span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span><span class="m">-30px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-checkbox</span><span class="nd">:hover</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">gray</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.recipe-label</span> <span class="nt">input</span><span class="nd">:checked</span> <span class="o">~</span> <span class="nc">.recipe-checkbox</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="n">lightgray</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>This was used to create the custom checkboxes and move around the list objects so that they were next to the checkboxes. It was a huge pain in the ass and I‚Äôm glad it‚Äôs done; CSS is kind of bad, folks.</p>

<p>The second, more interesting (at least to me) thing to note is the <code class="language-plaintext highlighter-rouge">{{line.checked}}</code> template call that‚Äôs inside the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> checkbox. This is how I decided to show if the boxes were checked or not. In my <code class="language-plaintext highlighter-rouge">utils.py</code> file, a check is made in the <code class="language-plaintext highlighter-rouge">CompiledIngredientLine</code> class (which converts the <code class="language-plaintext highlighter-rouge">CleanedLine</code> database object into what the template uses):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="bp">self</span><span class="p">.</span><span class="n">checked</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">if</span> <span class="n">cleaned_line</span><span class="p">.</span><span class="n">checked</span><span class="p">:</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">checked</span> <span class="o">=</span> <span class="s">" checked"</span></code></pre></figure>

<p>This way, the <code class="language-plaintext highlighter-rouge">{{line.checked}}</code> call will return <code class="language-plaintext highlighter-rouge">" checked"</code> if true, and nothing if false, causing the <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> to be checked or not.</p>

<p>The next thing you‚Äôll note is the inclusion of a new database attribute to the <code class="language-plaintext highlighter-rouge">CleanedLine</code> class:  the <code class="language-plaintext highlighter-rouge">hex_id</code> line. This came about when I was trying to determine how best to make my ajax call and reference the necessary line. At first, I thought to simply include the database <code class="language-plaintext highlighter-rouge">id</code> into the id of the checkbox, but I had avoided doing that in the past and I didn‚Äôt want to start now. Instead, I decided to google my concerns, to see if there were any industry standard ways around this problem.</p>

<p>As it turns out, there are. I quickly found <a href="https://medium.com/lightrail/prevent-business-intelligence-leaks-by-using-uuids-instead-of-database-ids-on-urls-and-in-apis-17f15669fd2e">this</a> article about UUIDs, and realized that I had been implementing something similar without realizing it in my <code class="language-plaintext highlighter-rouge">hex_name</code> attributes. Although the concerns raised in the article about business security don‚Äôt really apply to me (basically no one‚Äôs going to be using this app anyway), I still feel it‚Äôs best to adhere to proper standards.</p>

<p>To that end, I created a quick function in my <code class="language-plaintext highlighter-rouge">models.py</code> folder that returns a hex value, and added a new line into my <code class="language-plaintext highlighter-rouge">CompiledList</code> model that uses it:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">get_hex_id</span><span class="p">():</span>   <span class="c1"># helper function for generating hex identifiers
</span>    <span class="k">return</span> <span class="n">secrets</span><span class="p">.</span><span class="n">token_urlsafe</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="p">...</span>

<span class="k">class</span> <span class="nc">CleanedLine</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
  <span class="p">...</span>
  <span class="n">hex_id</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">String</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="n">get_hex_id</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># hex identifier for requests</span></code></pre></figure>

<p>At the same time, I made a note to go back and refactor my other models so they used the same function. This would ensure that every database item created in my code will have a unique identifier, and vastly simplifies some of my eariler work in trying to figure out how to identify lines.</p>

<p>Then, creating unique <code class="language-plaintext highlighter-rouge">id</code>s for the checkboxes and the lines was simple as importing this new <code class="language-plaintext highlighter-rouge">hex_id</code> attribute and attaching it to a word which identified the type of component: <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> components got an <code class="language-plaintext highlighter-rouge">id</code> called <code class="language-plaintext highlighter-rouge">"checkbox-{{line.hex_id}}"</code>, while the lines themselves (<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> components) got <code class="language-plaintext highlighter-rouge">id</code>s called <code class="language-plaintext highlighter-rouge">line-{{line.hex_id}}</code>.</p>

<p>This made the jQuery much easier to deal with. Here‚Äôs the code I put together for that:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.recipe-label</span><span class="dl">'</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">input</span><span class="dl">'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">change</span><span class="dl">"</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="kd">var</span> <span class="nx">selected_line</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span><span class="dl">'</span><span class="s1">line</span><span class="dl">'</span><span class="p">:</span> <span class="nx">selected_line</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">20</span><span class="p">)}</span>

    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">url</span><span class="p">:</span> <span class="nx">$SCRIPT_ROOT</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">/line/checked</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
      <span class="na">dataType</span><span class="p">:</span> <span class="dl">'</span><span class="s1">json</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">success</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">jsonData</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">line activation set to </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">jsonData</span><span class="p">[</span><span class="dl">'</span><span class="s1">isActive</span><span class="dl">'</span><span class="p">])</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">})</span></code></pre></figure>

<p>Once again, the code is quite simple and short when I figured out how to do it, but I suppose that‚Äôs just one of the downsides to learning as you go. I‚Äôm hoping my second project will move a bit quicker than this, precisely because I will know what I‚Äôm doing (at least somewhat).</p>

<p>Because this ajax request sent information to a route that didn‚Äôt exist, it was time to make that route.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">main</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/line/checked'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">toggle_line_check</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'line'</span><span class="p">))</span>
    <span class="n">line_to_toggle</span> <span class="o">=</span> <span class="n">CleanedLine</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">hex_id</span><span class="o">=</span><span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'line'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">)).</span><span class="n">first_or_404</span><span class="p">()</span>
    <span class="n">line_to_toggle</span><span class="p">.</span><span class="n">checked</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">line_to_toggle</span><span class="p">.</span><span class="n">checked</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">jsonify</span><span class="p">(</span><span class="n">isActive</span><span class="o">=</span><span class="n">line_to_toggle</span><span class="p">.</span><span class="n">checked</span><span class="p">,</span>
                   <span class="n">line</span> <span class="o">=</span> <span class="n">line_to_toggle</span><span class="p">.</span><span class="n">hex_id</span><span class="p">)</span></code></pre></figure>

<p>This area is again pretty self-explanatory. The code gets the <code class="language-plaintext highlighter-rouge">hex_id</code> and uses it to find the list, then toggles whether the list is turned on or not. It commits the change and returns the toggled value, as well as the <code class="language-plaintext highlighter-rouge">hex_id</code> of the changed line. Why return the <code class="language-plaintext highlighter-rouge">hex_id</code>? Because there was one last piece of this to do. I wanted to cross out the line in question, to show that it was disabled. This was accomplised with a single line of jQuery:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#line-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">jsonData</span><span class="p">[</span><span class="dl">'</span><span class="s1">line</span><span class="dl">'</span><span class="p">]).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="dl">'</span><span class="s1">strikethrough</span><span class="dl">'</span><span class="p">)</span></code></pre></figure>

<p>The <code class="language-plaintext highlighter-rouge">strikethrough</code> class is extremely simple and just creates a line through all text. In the future, I plan to expand this class to make the crossing out look a bit more sophisticated.</p>

<p>One final area: I need to cross out the lines when the page first loads. I did this by finding all checked boxes, finding their matched lines through the shared <code class="language-plaintext highlighter-rouge">hex_name</code>, and crossing them out as well:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">checked_lines</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.recipe-label</span><span class="dl">'</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">input:checked</span><span class="dl">'</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">){</span>
  <span class="kd">var</span> <span class="nx">this_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">line-</span><span class="dl">'</span><span class="o">+</span><span class="nx">this_id</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">line_to_cross</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#line-</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">this_id</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">line_to_cross</span><span class="p">)</span>
  <span class="nx">line_to_cross</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="dl">'</span><span class="s1">strikethrough</span><span class="dl">'</span><span class="p">)</span>
<span class="p">})</span></code></pre></figure>

<p>As you can see below, everything is working.</p>

<p><img src="/assets/img/posts/check-and-delete/crossed-out-items.png" alt="alt text" /></p>

<p>And that‚Äôs a wrap! Whew, this one took me a bit longer than I wanted it to, but I‚Äôm hopeful that several problems I solved here (chiefly the addition of the <code class="language-plaintext highlighter-rouge">hex_id</code>) will aid me in the next few additions to my list functionality.</p>

<h4 id="next-steps">Next Steps</h4>
<ul>
  <li>delete items from list</li>
  <li>move list items around</li>
</ul>
:ET