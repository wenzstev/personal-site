I"'a<p>Before I went any farther with the functionality of my app, I needed to implement some ability to navigate. So far, there was literally no way to access any of the lists unless you knew the exact hex name (not likely). And besides, I wanted to make it look a bit nicer. It’s amazing how much more professional a simple navbar can make a site look. So I decided to start there.</p>

<h3 id="navbar">Navbar</h3>

<p>My navbar is essentially taken from the default Bootstrap instructions, with some custom jinja templating to add the list of, ahem, lists.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">"navbar navbar-inverse"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container-fluid"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"navbar-header"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"navbar-toggle"</span> <span class="na">data-toggle=</span><span class="s">"collapse"</span> <span class="na">data-target=</span><span class="s">"#myNavbar"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
                <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"icon-bar"</span><span class="nt">&gt;&lt;/span&gt;</span>
            <span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"navbar-brand"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>Navbar<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"collapse navbar-collapse"</span> <span class="na">id=</span><span class="s">"myNavbar"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"nav navbar-nav"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"{{ url_for('main.home')}}"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                {% if grocery_lists %}
                    <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"dropdown"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"dropdown-toggle"</span> <span class="na">data-toggle=</span><span class="s">"dropdown"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span>My Lists<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"caret"</span><span class="nt">&gt;&lt;/span&gt;&lt;/a&gt;</span>
                        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">"dropdown-menu"</span><span class="nt">&gt;</span>
                            {% for list in grocery_lists %}
                                <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">"{{url_for('main.compiled_list', hex_name=list.hex_name)}}"</span><span class="nt">&gt;</span> ({{ list.hex_name }})<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
                            {% endfor %}
                        <span class="nt">&lt;/ul&gt;</span>
                    <span class="nt">&lt;/li&gt;</span>
                {% endif %}
            <span class="nt">&lt;/ul&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/nav&gt;</span></code></pre></figure>

<p><em>(side note: behold, I have discovered the use of the {% raw %} tag in Liquid. Beautiful stuff)</em></p>

<p>All this example does is create a small navbar with the ability to link to the homepage, and display all of the created grocery lists. The <code class="language-plaintext highlighter-rouge">grocery_lists</code> object is passed in through the route, like so:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">grocery_lists</span> <span class="o">=</span> <span class="n">CompiledList</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>

<span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'home.html'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">"Welcome!"</span><span class="p">,</span> <span class="n">grocery_lists</span><span class="o">=</span><span class="n">grocery_lists</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">)</span></code></pre></figure>

<p>And so on for the other pages. As with everything else on this site, this is still very barebones and has that “default Bootstrap” look that we all love, but I’m just trying to get my bearings here. Note that the ‘My Lists’ dropdown currently selects all lists; when I implement user functionality, that will change to just the user’s lists. But, to use my favorite saying, it’ll do for now.</p>

<p><img src="/assets/img/posts/app-navbar/dropdown-lists.png" alt="alt text" /></p>

<h3 id="delete">Delete</h3>

<p>Next it was time to add an option to delete lists. One thing that adding the option to navigate to all lists showed me is that there is a lot of junk in the database that needs to be gotten rid of. First, I created a route for deleting posts:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">main</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/list/&lt;string:hex_name&gt;/delete'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">hex_name</span><span class="p">):</span>
    <span class="n">list_to_delete</span> <span class="o">=</span> <span class="n">CompiledList</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">hex_name</span><span class="o">=</span><span class="n">hex_name</span><span class="p">).</span><span class="n">first_or_404</span><span class="p">()</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="n">list_to_delete</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'main.home'</span><span class="p">))</span></code></pre></figure>

<p>As an aside, I probably have enough routes at this point to justify splitting up my blueprint. Something to make note of for a post-to-come.</p>

<p>After creating the route, I needed an option to actually delete on my list page. And because deleting a list is a big deal, I wanted to make sure that the user had the option to confirm the delete, to prevent an accidental deletion. Okay, I admit: this is coming more or less right from the Flask tutorial series I used, but there’s no need to reinvent the wheel, and deleting is an important functionality to add.</p>

<p>First, I added a few buttons to the bottom of my list template:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;a</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span> <span class="na">href=</span><span class="s">"#"</span><span class="nt">&gt;</span> Add Line <span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span> <span class="na">data-toggle=</span><span class="s">"modal"</span> <span class="na">data-target=</span><span class="s">"#addRecipeModal"</span><span class="nt">&gt;</span> Add Recipe <span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-danger"</span> <span class="na">data-toggle=</span><span class="s">"modal"</span> <span class="na">data-target=</span><span class="s">"#deleteModal"</span><span class="nt">&gt;</span> Delete <span class="nt">&lt;/button&gt;</span></code></pre></figure>

<p>This created a few nice buttons at the bottom of the list:</p>

<p><img src="/assets/img/posts/app-navbar/new-list-page.png" alt="alt text" /></p>

<p>Very pretty, no? Note that the “Add Line” button has no functionality right now, but I want the option to add individual lines as desired, so I just put a nonworking button there as a placeholder. The other two buttons, however, activate modals, both of which use the Bootstrap modal template:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Modal Delete --&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal fade"</span> <span class="na">id=</span><span class="s">"deleteModal"</span> <span class="na">role=</span><span class="s">"dialog"</span> <span class="na">aria-labelledby=</span><span class="s">"deleteModalLabel"</span> <span class="na">aria-hidden=</span><span class="s">"true"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal-dialog"</span> <span class="na">role=</span><span class="s">"document"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal-content"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal-header"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;h5</span> <span class="na">class=</span><span class="s">"modal-title"</span> <span class="na">id=</span><span class="s">"deleteModalLabel"</span><span class="nt">&gt;</span>Delete List?<span class="nt">&lt;/h5&gt;</span>
                <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"close"</span> <span class="na">data-dismiss=</span><span class="s">"modal"</span> <span class="na">aria-label=</span><span class="s">"Close"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;span</span> <span class="na">aria-hidden=</span><span class="s">"true"</span><span class="nt">&gt;</span>x<span class="nt">&lt;/span&gt;</span>
                <span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal-body"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;p&gt;</span>Are you sure you want to delete this list? All data saved for it will be lost.<span class="nt">&lt;/p&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"modal-footer"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"containter-fluid"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"pull-left"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;form</span> <span class="na">class =</span><span class="s">col-md-4"</span> <span class="na">action=</span><span class="s">"{{ url_for('main.delete', hex_name=comp_list.hex_name) }}"</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">"btn btn-danger"</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Delete"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;/form&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"button"</span> <span class="na">class=</span><span class="s">"btn btn-secondary col-md-4"</span> <span class="na">data-dismiss=</span><span class="s">"modal"</span><span class="nt">&gt;</span>Close<span class="nt">&lt;/button&gt;</span>
                <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<p>When clicked, the modal looks like this:</p>

<p><img src="/assets/img/posts/app-navbar/delete-modal.png" alt="alt-text" /></p>

<p>And deleting is in.</p>

<h3 id="adding-to-an-existing-recipe">Adding to an Existing Recipe</h3>

<p>Last, but certainly not least, I turned my attention to the “Add Post” button. This is one of the most important aspects of the app; the ability to combine recipes and like ingredients into one list is kind of the whole point, and it’s a crucial piece of functionality as I work my way towards feature completeness.</p>

<p>I decided that, at least for now, I was going to use another modal to add a recipe, and have it drop down the same form as is currently on my main page. I’ll spare you the HTML and jinja markup, but here’s what the modal looks like when clicked:</p>

<p><img src="/assets/img/posts/app-navbar/add-recipe-modal.png" alt="alt text" /></p>

<p>So far so good. Next I was going to have to create a new route for the addition of the recipe. I quickly realized, however, that with a small amount of refactoring, I could reuse much of what I already had, and streamline the process.</p>

<p>Recall that I had originally set up <a href="/2020/02/15/Adding-to-the-Database.html">a cleaning route for new lists</a> using a ‘/clean’ route, with the <code class="language-plaintext highlighter-rouge">hex_name</code> of the list in question. This was confusing, however, becuase I was using the <code class="language-plaintext highlighter-rouge">hex_name</code> of the <em>RecipeList</em>, not the <code class="language-plaintext highlighter-rouge">CompiledList</code> that it would later become. This was because, when the cleaning took place, I had not yet created the compiled list that the lines would be added to.</p>

<p>Would it not be simpler to create the compiled list first, and then direct the user to a single “add” route, that I could then reuse any time additional recipes would be added to the list? Yes, I decided. Yes it would.</p>

<p>First, I wrote a new route, taking pieces from the old cleaning route. Note that this route uses the same “/list” route that is for all lists, and incorporates the  <code class="language-plaintext highlighter-rouge">hex_name</code>s of both the <code class="language-plaintext highlighter-rouge">CompiledList</code> and the <code class="language-plaintext highlighter-rouge">RecipeList</code>:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">main</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/list/&lt;string:list_name&gt;/add/&lt;string:new_recipe&gt;'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">add_recipe</span><span class="p">(</span><span class="n">list_name</span><span class="p">,</span> <span class="n">new_recipe</span><span class="p">):</span>
    <span class="n">form</span> <span class="o">=</span> <span class="n">RecipeCleanForm</span><span class="p">()</span>
    <span class="n">rlist</span> <span class="o">=</span> <span class="n">RecipeList</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">hex_name</span><span class="o">=</span><span class="n">new_recipe</span><span class="p">).</span><span class="n">first_or_404</span><span class="p">()</span>
    <span class="n">rlist_lines</span> <span class="o">=</span> <span class="n">RawLine</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">rlist</span><span class="o">=</span><span class="n">rlist</span><span class="p">).</span><span class="nb">all</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="n">current_list</span> <span class="o">=</span> <span class="n">CompiledList</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">hex_name</span><span class="o">=</span><span class="n">list_name</span><span class="p">).</span><span class="n">first_or_404</span><span class="p">()</span>
        <span class="n">current_list_lines</span> <span class="o">=</span> <span class="n">CleanedLine</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="nb">list</span><span class="o">=</span><span class="n">current_list</span><span class="p">).</span><span class="nb">all</span><span class="p">()</span>

        <span class="n">ingredient_dict</span> <span class="o">=</span> <span class="p">{</span><span class="n">line</span><span class="p">.</span><span class="n">ingredient</span><span class="p">:</span> <span class="n">line</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">current_list_lines</span><span class="p">}</span>  <span class="c1"># dictionary to make checking if line exists easier
</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">rlist_lines</span><span class="p">:</span>
            <span class="n">amount</span><span class="p">,</span> <span class="n">measurement</span><span class="p">,</span> <span class="n">ingredient</span> <span class="o">=</span> <span class="n">extract_ingredients</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">text_to_colors</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ingredient</span> <span class="o">!=</span> <span class="s">''</span><span class="p">:</span>  <span class="c1"># only create cleaned line if we found an ingredient
</span>                <span class="k">if</span> <span class="n">ingredient</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">ingredient_dict</span><span class="p">:</span>
                    <span class="n">cleaned_line</span> <span class="o">=</span> <span class="n">CleanedLine</span><span class="p">(</span><span class="n">amount</span><span class="o">=</span><span class="n">amount</span><span class="p">,</span>
                                               <span class="n">measurement</span><span class="o">=</span><span class="n">measurement</span><span class="p">,</span>
                                               <span class="n">ingredient</span><span class="o">=</span><span class="n">ingredient</span><span class="p">,</span>
                                               <span class="nb">list</span><span class="o">=</span><span class="n">current_list</span><span class="p">)</span>

                    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">cleaned_line</span><span class="p">)</span>
                    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>

                    <span class="n">line</span><span class="p">.</span><span class="n">cleaned_line</span> <span class="o">=</span> <span class="n">cleaned_line</span>
                    <span class="n">ingredient_dict</span><span class="p">[</span><span class="n">ingredient</span><span class="p">]</span> <span class="o">=</span> <span class="n">cleaned_line</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">line</span><span class="p">.</span><span class="n">cleaned_line</span> <span class="o">=</span> <span class="n">ingredient_dict</span><span class="p">[</span><span class="n">ingredient</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'main.compiled_list'</span><span class="p">,</span> <span class="n">hex_name</span><span class="o">=</span><span class="n">current_list</span><span class="p">.</span><span class="n">hex_name</span><span class="p">))</span>

    <span class="n">rlist_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">LineToPass</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">rlist_lines</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'rlist.html'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="s">"Adding Recipe"</span><span class="p">,</span> <span class="n">rlist</span><span class="o">=</span><span class="n">rlist</span><span class="p">,</span> <span class="n">rlist_lines</span><span class="o">=</span><span class="n">rlist_lines</span><span class="p">,</span> <span class="n">form</span><span class="o">=</span><span class="n">form</span><span class="p">)</span></code></pre></figure>

<p>You will notice some repeated code from previous routes, but it’s all been centralized into this route, making adding more recipes to a <code class="language-plaintext highlighter-rouge">CompiledList</code> a cinch.</p>

<p>Note also that I used a dictionary object to determine if an ingredient line had already been added. As the app currently exists, repeated ingredients are not added to the list, but a reference is added to that line from the relevant recipe. In the future, I may be consolidating the various amounts from the different ingredient lines (so that, for instance, two recipes each calling for two cups of flour will have four cups on the list), but at the moment I’m not showing amounts at all. They don’t quite seem to fit for a grocery list, not exactly. I want the option to exist, but something in me doesn’t like someone going to the store with a list that says “4 cups of flour.” This is pedantry, I am aware. Sue me.</p>

<p>Next steps:</p>
<ul>
  <li>make the cleaning page actually work</li>
  <li>increase options for editing the list (Such as adding a single line)</li>
  <li>show more information about the list on the list page</li>
</ul>

<p>… and plenty more. Stay tuned!</p>
:ET