I"q<p>Time to bring our baby into the cold, cruel world. <!--more--></p>

<p>In <a href="/2020/12/12/How-To-Deploy-Simple-Mern.html">Part 1</a> of this tutorial, we learned how to set up a simple React frontend and Express backend. Now, in Part 2, we’ll learn how to host it. There are many, many ways to do this, but for today I’m going to be using <a href="https://digitalocean.com">DigitalOcean</a>.</p>

<p>DigitalOcean has a ton of extremely good tutorials, and I’m going to be using <a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04">this one</a> as the backbone for this tutorial. It’s good but only covers the backend, and there are a few changes that we’ll need to make in order for both the front and back ends to be called from the same resource.</p>

<h3 id="step-1-getting-your-application-on-your-droplet">Step 1: Getting Your Application on your Droplet</h3>

<p>In order to transfer the application to your droplet, we’re going to use Git, specifically GitHub. If you’ve never used GitHub before, you can <a href="https://github.com/join?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F&amp;source=header-home">sign up here</a>. This isn’t a Git tutorial, but if you’ve never used the program before, you can check out some handy instructional material <a href="https://try.github.io/">here</a>. For now, we’re going to assume you have a GitHub account, and take it from there.</p>

<p>Log in to your account and select the “New” button by the Repositories list, on the upper left side of the screen.</p>

<p><img src="/assets/img/posts/mern/new-repo.png" alt="Picture of Github home page. The green &quot;New&quot; button is highlighted in red." /></p>

<p>On the next page, name your new repo whatever you like, and provide a description if you want. Make sure that you do NOT provide a README or .gitignore. We’re going to take care of them ourselves.</p>

<p><img src="/assets/img/posts/mern/new-repo-2.png" alt="Picture of the &quot;new repository&quot; page, along with instructions that mirror the ones in the previous paragraph." /></p>

<p>Click “Create repository” and you should now be on the main page for your brand new repo!</p>

<p>We’re going to be following the instructions there, but first you need to make a few changes to our actual project. The <code class="language-plaintext highlighter-rouge">create-react-app</code> function creates it’s own git repository, and we’re going to need to get rid of it in order to make sure everything goes smoothly.</p>

<p>In your file explorer, navigate to the “client” folder that was created when you ran <code class="language-plaintext highlighter-rouge">create-react-app</code>. Depending on your settings, you should either see a <code class="language-plaintext highlighter-rouge">.git</code> file or not. If you don’t, you’ll need to show hidden files. <a href="https://support.microsoft.com/en-us/windows/view-hidden-files-and-folders-in-windows-10-97fbc472-c603-9d90-91d0-1166d1d9f4b5#:~:text=Open%20File%20Explorer%20from%20the,folders%2C%20and%20drives%20and%20OK.">Here’s how to do it on Windows</a></p>

<p>When you’ve found the .git file, just delete it. That’s all you need to do to get rid of the repo there.</p>

<p>You should also see a “.gitignore” file. Rather than delete it, we’re going to move it up a folder and modify it to be our own gitignore.</p>

<p>Move the file up into your main project folder, and alter it so that it reads as follows:</p>

<figure class="highlight"><pre><code class="language-escape" data-lang="escape"># See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
client/node_modules/
backend/node_modules/
/.pnp
.pnp.js

# testing
/coverage

# production
client/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*</code></pre></figure>

<p>The main change we made here is to change the default <code class="language-plaintext highlighter-rouge">/node_modules/</code> path to work for both the <code class="language-plaintext highlighter-rouge">client</code> and the <code class="language-plaintext highlighter-rouge">backend</code> folders. Otherwise, we’d be committing all of our Node packages to the git repository, which would be a huge waste of space.</p>

<p>When you’re finished, it’s time to create the actual repo that we’re going to be using. In your terminal screen, navigate to the main project folder and initialize a new git repository with this command:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><span class="go">git init</span></code></pre></figure>

<p>This will create the new repository, and the .gitignore file you modifed will automatically be used for the repository.</p>

<p>Now we’ve created our repo, but we still need to get it on the internet. To do this, return to the main page of the repo you just created. There will be several options for how to populate this repo, and we’re going to use the second one on the list (“push an existing repository from the command line”).</p>

<p><img src="/assets/img/posts/mern/push-repo-to-github.png" alt="Page of instructions for how to set up the Github repository. The second optoon on the list, &quot;push an existing repository from the command line&quot; is highlighted." /></p>

<p>The commands you see here are to be done in your main git folder. You should still have it open in your console screen, so enter the commands as you see them in the example above (or in your own repository instructions):</p>

:ET