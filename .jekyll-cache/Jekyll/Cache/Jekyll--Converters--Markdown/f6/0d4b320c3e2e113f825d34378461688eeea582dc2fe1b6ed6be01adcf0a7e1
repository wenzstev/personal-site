I"Š<p>My next goals involved creating a better user experience, and to do that I needed a place where the user could edit and alter their information. In essence, I needed a settings page. I started by creating a new template, inserting the basic user information, as well as two buttons: one to change user information (such as username or email) and one to change the userâ€™s password.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html">{% extends 'layout.html' %}

{% block content %}
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card mt-3"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card-header"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h5&gt;</span>Account Information<span class="nt">&lt;/h5&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card-body"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>Username: {{current_user.username}}<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;p&gt;</span>Email: {{current_user.email }}<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-primary"</span><span class="nt">&gt;</span>Edit Information<span class="nt">&lt;/button&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-secondary"</span><span class="nt">&gt;</span>Reset Password<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
{% endblock content %}</code></pre></figure>

<p>I then created a new route for the templateâ€¦</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">account</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/settings'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">settings</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'settings.html'</span><span class="p">)</span></code></pre></figure>

<p>â€¦and a new link on the navbar for my page:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">"nav-item"</span><span class="nt">&gt;&lt;a</span> <span class="na">class=</span><span class="s">"nav-link"</span> <span class="na">href=</span><span class="s">"{{ url_for('account.settings') }}"</span><span class="nt">&gt;</span>Settings<span class="nt">&lt;/a&gt;&lt;/li&gt;</span></code></pre></figure>

<p>And a simple, basic settings page was born.</p>

<p><img src="/assets/img/posts/settings-and-passwords/settings-page.png" alt="alt text" /></p>

<p>Now, I needed to make the buttons work. First, I created a new form for editing the userâ€™s information. I needed to make a new form because my previous register form had a <code class="language-plaintext highlighter-rouge">DataRequred()</code> validator, so all information had to be included for it to work.</p>

<p>I created two new forms, one for editing the username and email, and the other for changing the password.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">EditForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="s">"Username: "</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="s">"Email: "</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">Email</span><span class="p">()])</span>
    <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">"Submit Changes"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ChangePasswordForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
    <span class="n">old_password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">'Old Password'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
    <span class="n">new_password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">'New Password'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
    <span class="n">new_password_confirm</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">'Confirm New Password'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">(),</span> <span class="n">EqualTo</span><span class="p">(</span><span class="s">'new_password'</span><span class="p">)])</span>
    <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">'Change Password'</span><span class="p">)</span></code></pre></figure>

<p>I started with the <code class="language-plaintext highlighter-rouge">EditForm</code>, since it seemed slightly more straightfoward to me. I passed the form into the route, and wrote the code to update the username and email, first checking to make sure that the username or email had not already been taken by a different account.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">account</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/settings'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">settings</span><span class="p">():</span>
    <span class="n">edit_form</span> <span class="o">=</span> <span class="n">EditForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">edit_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'form validated'</span><span class="p">)</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">current_user</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">edit_form</span><span class="p">.</span><span class="n">username</span><span class="p">.</span><span class="n">data</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">exc</span><span class="p">.</span><span class="n">IntegrityError</span> <span class="k">as</span> <span class="n">error</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="n">flash</span><span class="p">(</span><span class="s">'That username has already been taken.'</span><span class="p">,</span> <span class="s">'danger'</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">edit_form</span><span class="p">.</span><span class="n">email</span><span class="p">.</span><span class="n">data</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="n">exc</span><span class="p">.</span><span class="n">IntegrityError</span> <span class="k">as</span> <span class="n">error</span><span class="p">:</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="n">flash</span><span class="p">(</span><span class="s">'That email is in use for another account.'</span><span class="p">,</span> <span class="s">'danger'</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span>

        <span class="n">flash</span><span class="p">(</span><span class="s">'account updated successfully!'</span><span class="p">,</span> <span class="s">'success'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span>

    <span class="n">edit_form</span><span class="p">.</span><span class="n">username</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">current_user</span><span class="p">.</span><span class="n">username</span>
    <span class="n">edit_form</span><span class="p">.</span><span class="n">email</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">current_user</span><span class="p">.</span><span class="n">email</span>

    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'settings.html'</span><span class="p">,</span> <span class="n">edit_form</span><span class="o">=</span><span class="n">edit_form</span><span class="p">)</span></code></pre></figure>

<p>I then decided to add the information via my favorite feature, the modal. Iâ€™ve shown a lot of modals on this blog so far, so Iâ€™ll spare the reader the agony of looking through anymore versions of what is essentially the same piece of code. In a nutshell, I took the modal html from my list page and inserted my new <code class="language-plaintext highlighter-rouge">EditForm</code> into it:</p>

<p><img src="/assets/img/posts/settings-and-passwords/edit-info-modal.png" alt="alt text" /></p>

<p>Then, it was time to write the logic for changing the password. I added my <code class="language-plaintext highlighter-rouge">ChangePasswordForm</code> to the <code class="language-plaintext highlighter-rouge">Settings</code> route, and wrote code to first ensure that the userâ€™s password was correct, before hashing their new password and storing the new hash as the password.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">password_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">check_password_hash</span><span class="p">(</span><span class="n">current_user</span><span class="p">.</span><span class="n">password</span><span class="p">,</span> <span class="n">password_form</span><span class="p">.</span><span class="n">old_password</span><span class="p">.</span><span class="n">data</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">password_form</span><span class="p">.</span><span class="n">new_password</span><span class="p">.</span><span class="n">data</span> <span class="o">==</span> <span class="n">password_form</span><span class="p">.</span><span class="n">old_password</span><span class="p">.</span><span class="n">data</span><span class="p">:</span>  <span class="c1"># can't change password if it's the same
</span>            <span class="n">flash</span><span class="p">(</span><span class="s">'Your new password must be different than your old one.'</span><span class="p">,</span> <span class="s">'danger'</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">current_user</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">generate_password_hash</span><span class="p">(</span><span class="n">password_form</span><span class="p">.</span><span class="n">new_password</span><span class="p">.</span><span class="n">data</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
            <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
            <span class="n">flash</span><span class="p">(</span><span class="s">'Your password has been changed successfully!'</span><span class="p">,</span> <span class="s">'success'</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">flash</span><span class="p">(</span><span class="s">'The password you entered does not match our records.'</span><span class="p">,</span> <span class="s">'danger'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.settings'</span><span class="p">))</span></code></pre></figure>

<p>Then in inserted the information into a second modal:</p>

<p><img src="/assets/img/posts/settings-and-passwords/password-change.png" alt="alt text" /></p>

<p>Now the user had the ability to change their email, username, and password at will. One thing I might want to add in the future is a verification check if the user wants to change their email, but Iâ€™m satisfied with this as a first pass for now.</p>

<p>But another question remains: itâ€™s great if the user can change their password when logged in, but what if the user forgets their password? Most web apps have the ability to allow a user to reset their password if they have their email address, so I wanted to add that in as well.</p>

<h2 id="creating-a-reset-password-function">Creating a Reset Password Function</h2>

<p>As is customary with my Flask knowledge, I used <a href="https://www.youtube.com/user/schafer5">Corey Schaferâ€™s</a> tutorial set as my starting point. In particular, <a href="https://www.youtube.com/watch?v=vutyTx7IaAI&amp;list=PL-osiE80TeTs4UjLw5MM6OjgkjFeUxCYH&amp;index=10">this</a> tutorial was what I followed to get my reset password functionality working.</p>

<p>First, I created two new forms, one for sending the email, and one for creating the new password:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">ResetRequestForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="s">"Email: "</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">Email</span><span class="p">()])</span>
    <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">"Request Password Reset"</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ResetPasswordForm</span><span class="p">(</span><span class="n">FlaskForm</span><span class="p">):</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">'Password'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">()])</span>
    <span class="n">confirm_password</span> <span class="o">=</span> <span class="n">PasswordField</span><span class="p">(</span><span class="s">'Confirm Password'</span><span class="p">,</span> <span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">DataRequired</span><span class="p">(),</span> <span class="n">EqualTo</span><span class="p">(</span><span class="s">'password'</span><span class="p">)])</span>
    <span class="n">submit</span> <span class="o">=</span> <span class="n">SubmitField</span><span class="p">(</span><span class="s">'Reset Password'</span><span class="p">)</span></code></pre></figure>

<p>I then created two new routes, one for sending the reset request, and one for after the token was created.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">@</span><span class="n">account</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/reset_password"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">reset_request</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">current_user</span><span class="p">.</span><span class="n">is_authenticated</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'main.home'</span><span class="p">))</span>

    <span class="n">reset_form</span> <span class="o">=</span> <span class="n">ResetRequestForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">reset_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
      <span class="k">pass</span>

    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'reset_request.html'</span><span class="p">,</span> <span class="n">reset_form</span><span class="o">=</span><span class="n">reset_form</span><span class="p">)</span>


<span class="o">@</span><span class="n">account</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/reset_password/&lt;token&gt;"</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">reset_token</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">current_user</span><span class="p">.</span><span class="n">is_authenticated</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'main.home'</span><span class="p">))</span>

    <span class="n">reset_form</span> <span class="o">=</span> <span class="n">ResetPasswordForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">reset_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
        <span class="k">pass</span>

    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'reset_token.html'</span><span class="p">,</span> <span class="n">reset_form</span><span class="o">=</span><span class="n">reset_form</span><span class="p">)</span></code></pre></figure>

<p>Each of these got a new template, where I built the forms using the same method Iâ€™d built all the rest: copious use of Bootstrapâ€™s <a href="https://getbootstrap.com/docs/4.0/components/card/">cards</a> class, with checks to show any information if the user entered invalid data. For demonstration sake, hereâ€™s the code for the reset form; the password changing form code looks much the same.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card mt-4"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"card-body bg-light"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;h5</span> <span class="na">class=</span><span class="s">"card-title"</span><span class="nt">&gt;</span>Enter your email below:<span class="nt">&lt;/h5&gt;</span>
        <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"card-text"</span><span class="nt">&gt;</span>An email will be sent to you with instructions on resetting your password.<span class="nt">&lt;/p&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"POST"</span> <span class="na">action=</span><span class="s">""</span><span class="nt">&gt;</span>
            {{ reset_form.hidden_tag() }}
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
                {{ reset_form.email.label(class='form-control-label') }}
                {% if reset_form.email.errors %}
                {{ reset_form.email(class='form-control is-invalid') }}
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"invalid-feedback"</span><span class="nt">&gt;</span>
                    {% for error in reset_form.email.errors %}
                    <span class="nt">&lt;span&gt;</span>{{ error }}<span class="nt">&lt;/span&gt;</span>
                    {% endfor %}
                <span class="nt">&lt;/div&gt;</span>
                {% else %}
                    {{ reset_form.email(class='form-control') }}
                {% endif %}
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
                {{ reset_form.submit(class='btn btn-primary') }}
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<h4 id="the-email-reset-page">The Email Reset Page</h4>
<p><img src="/assets/img/posts/settings-and-passwords/email-reset-form.png" alt="alt text" /></p>

<h4 id="the-reset-password-page">The Reset Password Page</h4>
<p><img src="/assets/img/posts/settings-and-passwords/reset-password-form.png" alt="alt text" /></p>

<p>This was all very good, but the program still didnâ€™t actually have any functioning logic. To change that, I first went into my <code class="language-plaintext highlighter-rouge">models.py</code> file, and added two new functions to the <code class="language-plaintext highlighter-rouge">User</code> model: one to create the token, and one to verify it. Both made use of the <code class="language-plaintext highlighter-rouge">itsdangerous</code> module. The token itself is set to expire after an hour.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">itsdangerous</span> <span class="kn">import</span> <span class="n">TimedJSONWebSignatureSerializer</span> <span class="k">as</span> <span class="n">Serializer</span>

<span class="p">...</span>

<span class="k">def</span> <span class="nf">get_reset_token</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">expires_sec</span><span class="o">=</span><span class="mi">1800</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">Serializer</span><span class="p">(</span><span class="n">current_app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="s">'SECRET_KEY'</span><span class="p">],</span> <span class="n">expires_sec</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">'user_id'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="nb">id</span><span class="p">}).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>

<span class="o">@</span><span class="nb">staticmethod</span>
<span class="k">def</span> <span class="nf">verify_reset_token</span><span class="p">(</span><span class="n">token</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">Serializer</span><span class="p">(</span><span class="n">current_app</span><span class="p">.</span><span class="n">config</span><span class="p">[</span><span class="s">'SECRET_KEY'</span><span class="p">])</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">user_id</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">token</span><span class="p">)[</span><span class="s">'user_id'</span><span class="p">]</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">return</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span></code></pre></figure>

<p>Then I created a new <code class="language-plaintext highlighter-rouge">utils.py</code> file for my <code class="language-plaintext highlighter-rouge">account</code> package. Here, I wrote a function that would send the email to the user.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">send_reset_email</span><span class="p">(</span><span class="n">user</span><span class="p">):</span>
    <span class="n">token</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">get_reset_token</span><span class="p">()</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span><span class="s">'Password Reset Request'</span><span class="p">,</span> <span class="n">sender</span><span class="o">=</span><span class="s">'groceryapp5@gmail.com'</span><span class="p">,</span> <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="n">user</span><span class="p">.</span><span class="n">email</span><span class="p">])</span>
    <span class="n">msg</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">f'''To reset your password, visit the following link:
                    </span><span class="si">{</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.reset_token'</span><span class="p">,</span> <span class="n">token</span><span class="o">=</span><span class="n">token</span><span class="p">,</span> <span class="n">_</span> <span class="n">external</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="si">}</span><span class="s">
                    If you did not make this request, please ignore this email. '''</span>

    <span class="n">mail</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span></code></pre></figure>

<p>Then, back in my routes file, I first wrote the information that would send the email in the <code class="language-plaintext highlighter-rouge">reset_request</code> route. It did this by checking if the entered email was in fact associated with an account, and sending the email if so. If not, it flashed a message that the email was not associated with the account, and reset the page.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># in reset_request function
</span><span class="k">if</span> <span class="n">reset_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">reset_form</span><span class="p">.</span><span class="n">email</span><span class="p">.</span><span class="n">data</span><span class="p">).</span><span class="n">first</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="n">flash</span><span class="p">(</span><span class="s">'Error: no account associated with this email. '</span><span class="p">,</span> <span class="s">'danger'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.reset_request'</span><span class="p">))</span>
    <span class="n">send_reset_email</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">flash</span><span class="p">(</span><span class="s">'An email has been sent with instructions to reset your password.'</span><span class="p">,</span> <span class="s">'success'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.login'</span><span class="p">))</span></code></pre></figure>

<p>Then, in the <code class="language-plaintext highlighter-rouge">reset_token</code> route, I check that the token is correct and, if so, allow the user to change their password:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># in reset_request function
</span><span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">verify_reset_token</span><span class="p">(</span><span class="n">token</span><span class="p">)</span>
<span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
    <span class="n">flash</span><span class="p">(</span><span class="s">'That is an invalid or expired token.'</span><span class="p">,</span> <span class="s">'warning'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.reset_request'</span><span class="p">))</span>
<span class="n">reset_form</span> <span class="o">=</span> <span class="n">ResetPasswordForm</span><span class="p">()</span>
<span class="k">if</span> <span class="n">reset_form</span><span class="p">.</span><span class="n">validate_on_submit</span><span class="p">():</span>
    <span class="n">hashed_password</span> <span class="o">=</span> <span class="n">bcrypt</span><span class="p">.</span><span class="n">generate_password_hash</span><span class="p">(</span><span class="n">reset_form</span><span class="p">.</span><span class="n">password</span><span class="p">.</span><span class="n">data</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span>
    <span class="n">user</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">hashed_password</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">flash</span><span class="p">(</span><span class="s">'Your password has been updated!'</span><span class="p">,</span> <span class="s">'success'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="n">url_for</span><span class="p">(</span><span class="s">'account.login'</span><span class="p">))</span></code></pre></figure>

<p>To test that it would not use an invalid token, I specifically messed up the token to see if I would get the flashed message, and I did:</p>

<p><img src="/assets/img/posts/settings-and-passwords/email-form-bad-token.png" alt="alt text" /></p>

<p>Whew, that was quite a lot this time, but Iâ€™m getting very, very close to feature completeness. Once I add in the last few features for accounts, I plan to go back through and start tackling the laundry list of bugs and quality-of-life issues that I have. But this is starting to feel like the final stretch.</p>

<h4 id="next-steps">Next Steps</h4>
<ul>
  <li>requirements for passwords</li>
  <li>prevent others from being able to edit a list</li>
  <li>copy anotherâ€™s list for editing</li>
</ul>
:ET